library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity test_bullet is
end entity;

architecture test of collision_detect_u is
    component collision_detect_u is
    generic(
        size: integer := 10;
        a_length: integer := 64;
        b_length: integer := 64
    );
    port(
        clk_50M: in std_logic;
        a_x: in std_logic_vector(size-1 downto 0);
        a_y: in std_logic_vector(size-1 downto 0);
        b_x: in std_logic_vector(size-1 downto 0);
        b_y: in std_logic_vector(size-1 downto 0);
        collision: out std_logic := '0'
    );
    end component;

    signal t_clk_50M: std_logic := '0';
    signal t_ai_x, t_ai_y, t_tank_y, t_tank_x, : std_logic_vector(9 downto 0);
    signal t_collision: std_logic;
begin
    t_ai_x <= "0000000000", "0110010000" after 4000 ps;
    t_ai_y <= "0000100100", "0110010000" after 4000 ps;
    

    -- clock generation
    process
    begin
        wait for 50 ps;
        t_clk_50M <= '1';
        wait for 50 ps;
        t_clk_50M <= '0';
    end process;

    collision: collision_detect_u 
    generic map(
        10, 64, 64
    )
    port map(
        clk_50M,
        t_ai_x,
        t_ai_y,
        t_tank_x,
        t_tank_y,
        t_collision
    );
end architecture;